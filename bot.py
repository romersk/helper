import logging
import os
import sys
import asyncio
import re
from datetime import datetime
from telegram import Update
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
    ConversationHandler,
)
from telegram.request import HTTPXRequest

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    level=logging.INFO
)
logger = logging.getLogger(__name__)

WAITING_FOR_DATA = 1

async def post_init(application: Application):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Telegram API —Å —Ç–∞–π–º–∞—É—Ç–æ–º"""
    try:
        await asyncio.wait_for(application.bot.get_me(), timeout=30)
        logger.info("–£—Å–ø–µ—à–Ω–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Telegram API")
    except Exception as e:
        logger.error(f"FATAL: –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è: {e}")
        sys.exit(1)

def parse_time(ts: str) -> datetime:
    """–ü–∞—Ä—Å–∏—Ç —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç '16 –∞–ø—Ä., 16:15'"""
    ts = ts.strip().lower()
    pattern = r'^(\d{1,2}) (\w{3})\., (\d{1,2}:\d{2})$'
    pattern1 = r'^(\d{1,2}) (\w{3}), (\d{1,2}:\d{2})$'
    match = re.match(pattern, ts)
    if not match:
        match = re.match(pattern1, ts)
        if not match:
            raise ValueError(
                f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç: `{ts}`\n"
                "–û–∂–∏–¥–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Ñ–æ—Ä–º–∞—Ç: 16 –∞–ø—Ä., 16:15"
            )
    
    day, month_str, time_part = match.groups()

    month_map = {
        '—è–Ω–≤': '01', '—Ñ–µ–≤': '02', '–º–∞—Ä': '03',
        '–∞–ø—Ä': '04', '–º–∞—è': '05', '–∏—é–Ω': '06',
        '–∏—é–ª': '07', '–∞–≤–≥': '08', '—Å–µ–Ω': '09',
        '–æ–∫—Ç': '10', '–Ω–æ—è': '11', '–¥–µ–∫': '12'
    }

    month = month_map.get(month_str)
    if not month:
        raise ValueError(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –º–µ—Å—è—Ü: {month_str}")

    day = day.zfill(2)
    current_year = datetime.now().year
    datetime_str = f"{current_year}-{month}-{day} {time_part}"

    try:
        return datetime.strptime(datetime_str, "%Y-%m-%d %H:%M")
    except Exception:
        raise ValueError(
            f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞–∑–æ–±—Ä–∞—Ç—å –¥–∞—Ç—É: `{ts}`"
        )

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    logger.info(f"/start –æ—Ç {update.effective_user.id}")
    await update.message.reply_text(
        "üöï <b>–ê–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä –ø–æ–µ–∑–¥–æ–∫</b>\n\n"
        "–ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "<b>–§–∞–º–∏–ª–∏—è –ò–º—è –û—Ç—á–µ—Å—Ç–≤–æ</b>\n"
        "<i>–î–∞—Ç–∞ –∏ –≤—Ä–µ–º—è</i>\n\n"
        "–î–æ–ø—É—Å—Ç–∏–º—ã–π —Ñ–æ—Ä–º–∞—Ç:\n"
        "‚Ä¢ 16 –∞–ø—Ä., 16:15\n\n"
        "–ó–∞–≤–µ—Ä—à–∏—Ç—å –≤–≤–æ–¥ ‚Äî /done\n"
        "–û—Ç–º–µ–Ω–∞ ‚Äî /cancel",
        parse_mode="HTML"
    )
    context.user_data["collected_data"] = []
    return WAITING_FOR_DATA

async def collect_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    context.user_data["collected_data"].append(update.message.text)
    await update.message.reply_text(
        "‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã. –ú–æ–∂–Ω–æ –ø—Ä–∏—Å—ã–ª–∞—Ç—å —Å–ª–µ–¥—É—é—â—É—é —á–∞—Å—Ç—å –∏–ª–∏ /done –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è",
        parse_mode="HTML"
    )
    return WAITING_FOR_DATA

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "‚ùå –û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—Å–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã.",
        parse_mode="HTML"
    )
    context.user_data.clear()
    return ConversationHandler.END

async def process_data(update: Update, context: ContextTypes.DEFAULT_TYPE):
    try:
        full_text = "\n".join(context.user_data["collected_data"])
        lines = [line.strip() for line in full_text.split("\n") if line.strip()]

        if len(lines) % 2 != 0:
            await update.message.reply_text(
                "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞:</b> –ù–µ–ø–∞—Ä–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫. –ö–∞–∂–¥–æ–º—É –§–ò–û –¥–æ–ª–∂–Ω–∞ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–æ–≤–∞—Ç—å –¥–∞—Ç–∞.",
                parse_mode="HTML"
            )
            return ConversationHandler.END

        drivers = {}
        for i in range(0, len(lines), 2):
            name = lines[i]
            time_str = lines[i + 1]
            try:
                time = parse_time(time_str)
                if name not in drivers:
                    drivers[name] = {"first": time, "last": time}
                else:
                    drivers[name]["first"] = min(drivers[name]["first"], time)
                    drivers[name]["last"] = max(drivers[name]["last"], time)
            except ValueError as e:
                await update.message.reply_text(str(e))
                return ConversationHandler.END

        if not drivers:
            await update.message.reply_text("‚ÑπÔ∏è –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞")
            return ConversationHandler.END

        report = ["<b>üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞–Ω–∞–ª–∏–∑–∞</b>\n"]
        for name, times in sorted(drivers.items(), key=lambda x: x[1]["first"]):
            report.append(
                f"\nüë§ <b>{name}</b>\n"
                f"‚Ä¢ –ü–µ—Ä–≤–∞—è –ø–æ–µ–∑–¥–∫–∞: {times['first'].strftime('%d.%m %H:%M')}\n"
                f"‚Ä¢ –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–µ–∑–¥–∫–∞: {times['last'].strftime('%d.%m %H:%M')}"
            )

        message = "\n".join(report)
        for i in range(0, len(message), 4096):
            await update.message.reply_text(
                message[i:i + 4096],
                parse_mode="HTML"
            )

    except Exception as e:
        logger.exception("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –¥–∞–Ω–Ω—ã—Ö")
        await update.message.reply_text(
            "‚ö†Ô∏è <b>–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏:</b> –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –¥–∞–Ω–Ω—ã–µ —Å–Ω–æ–≤–∞.",
            parse_mode="HTML"
        )
    finally:
        context.user_data.clear()

    return ConversationHandler.END

